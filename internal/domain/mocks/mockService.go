// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "book_store/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteBookById provides a mock function with given fields: ctx, id
func (_m *Service) DeleteBookById(ctx context.Context, id int) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBooks provides a mock function with given fields: ctx
func (_m *Service) GetAllBooks(ctx context.Context) ([]domain.Book, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Book
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: ctx, id
func (_m *Service) GetBookById(ctx context.Context, id int) (*domain.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostNewBook provides a mock function with given fields: ctx, req
func (_m *Service) PostNewBook(ctx context.Context, req domain.Book) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBookById provides a mock function with given fields: ctx, req
func (_m *Service) UpdateBookById(ctx context.Context, req domain.Book) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
